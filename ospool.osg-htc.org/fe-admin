#!/usr/bin/python3

import argparse
import re
import socket
import sys
import requests
import urllib.parse as urlparse

import xml.etree.ElementTree as ET
from xml.sax.saxutils import escape
from pprint import pprint

# Maintain a list of "core" schedds - these are
# special as have either credentials or tested
# ssl auth so that we know they can be quried
# cleanly by the frontend. Schedds not in this
# list will still be able to join and use the
# pool, but will not be includeded in the 
# demand calculations.
# This is defined later, once we know if we are
# targetting itb or production environment.
core_schedds = [
        'amundsen.grid.uchicago.edu',
        'ap1.facility.path-cc.io',
        'ap20.uc.osg-htc.org',
        'ap21.uc.osg-htc.org',
        'ap22.uc.osg-htc.org',
        'ap23.uc.osg-htc.org',
        'ap40.uw.osg-htc.org',
        'grid-submitter.icecube.wisc.edu',
        'huxley-osgsub-001.sdmz.amnh.org',
        'osg-eic.jlab.org',
        'scosg2201.jlab.org',
        'scosg2202.jlab.org',
        'scott.grid.uchicago.edu',
        'sub-2.icecube.wisc.edu',
        ]

def load_data():
    '''
    Load data from topology database
    '''
    url = "https://my.opensciencegrid.org/rgsummary/xml?" \
          "gridtype=on&gridtype_1=on&" \
          "disable=on&disable_value=0&" \
          "active=on&active_value=1&" \
          "service=on&service_109=on"
    response = requests.get(url)

    if response.status_code != requests.codes.ok:
        raise Exception("OSG Topology request failed (status %d): %s" % \
              (response.status_code, response.text[:2048]))
    
    root = ET.fromstring(response.content)
    if root.tag != 'ResourceSummary':
        raise Exception("OSG Topology returned invalid XML with root tag %s" % root.tag)
   
    data = {}
    for rgroup in root:
        for res in rgroup:
            if res.tag == 'Resources':
                for r in res:
                    hostname = None
                    dn = None
                    service_tags = []
                    for tag in r:
                        if tag.tag == 'FQDN':
                            hostname = tag.text
                        if tag.tag == 'Tags':
                            for stag in tag:
                                service_tags.append(stag.text)
                    # make sure the host has a valid DNS entry
                    try:
                        addr = socket.gethostbyname(hostname)
                    except:
                        continue
                    # we now have all the info needed for this host
                    if 'OSPool' in service_tags:
                        data[hostname] = {}
                        # dn is still required for gwms, even if it is not actually used
                        if dn:
                            data[hostname]['dn'] = dn
                        else:
                            data[hostname]['dn'] = '/CN={}'.format(hostname)
                        
    return data


def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1")


def escape_dn(dn):
    dn = dn.replace('.', '\\.')
    return dn


def generate_gwms_frontend_config(config, data):
    '''
    generate a GWMS frontend.xml
    '''

    blob = ''
    for hostname, attrs in sorted(data.items()):
        if 'dn' in attrs and hostname in core_schedds:
            blob += '                <schedd DN="%s" fullname="%s"/>\n' %(escape(attrs['dn']), escape(hostname))
    
    f = open('{}/frontend-template.xml'.format(config.target_env))
    for line in f:
        line = line.rstrip()
        if re.search('{{{schedd_blob}}}', line):
            print(blob)
        else:
            print(line)
    f.close()


def generate_htcondor_mapfile(config, data):
    '''
    generate a HTCondor map file
    '''

    print("# DO NOT EDIT LOCAL COPY - This file is generated from the osg-flock repository")

    #for hostname, attrs in sorted(data.items()):
    #    if 'dn' in attrs:
    #        print('GSI "^%s$" %s' %(escape_dn(attrs['dn']), attrs['site']))

    print('IDTOKEN (.*) \\1')
    print('FS (.*) \\1')


def generate_htcondor_config(config, data):
    '''
    generate a HTCondor flocking config
    '''

    print("# DO NOT EDIT LOCAL COPY - This file is generated from the osg-flock repository")
    flocking_hosts = []
    for hostname, attrs in data.items():
        # Are we adding all here? Any exceptions?
        flocking_hosts.append(hostname)
    flocking_hosts.sort()
    print('FLOCK_FROM = %s' %(', '.join(flocking_hosts)))


def main():
    '''
    switch between the different modes and output the wanted config file
    '''
    global core_schedds

    parser = argparse.ArgumentParser()
    parser.add_argument('--target-env', action='store',
                        default="development", dest='target_env',
                        help='Environment: development/production')
    parser.add_argument('--gwms-frontend-config', action='store_true',
                        default=False, dest='gwms_frontend_config',
                        help='Generate the GWMS frontend.xml config')
    parser.add_argument('--htcondor-mapfile', action='store_true',
                        default=False, dest='htcondor_mapfile',
                        help='Generate the HTCondor mapfile')
    parser.add_argument('--htcondor-config', action='store_true',
                        default=False, dest='htcondor_config',
                        help='Generate the HTCondor flock config')
    args = parser.parse_args()

    if args.target_env == "development":
        core_schedds = [
            'ap20.uc.osg-htc.org',
            'ap21.uc.osg-htc.org',
            'ap22.uc.osg-htc.org',
            'ap23.uc.osg-htc.org',
            'ap40.uw.osg-htc.org',
            ]

    if args.gwms_frontend_config:
        data = load_data()
        generate_gwms_frontend_config(args, data)
    elif args.htcondor_mapfile:
        data = load_data()
        generate_htcondor_mapfile(args, data)
    elif args.htcondor_config:
        data = load_data()
        generate_htcondor_config(args, data)
    else:
        parser.print_help()


if __name__ == '__main__':
   sys.exit(main())


