#!/bin/bash
#
# This script selects a default image for a glidein. In the fe config,
# specify a distribution for both regular and gpu slots. Example:
#
#   <attr name="OSG_DEFAULT_CONTAINER_DISTRIBUTION" glidein_publish="False" job_publish="False" parameter="True" type="string" value="25%__opensciencegrid/osgvo-el7:latest 25%__opensciencegrid/osgvo-ubuntu-18.04:latest 25%__opensciencegrid/osgvo-el8:latest 25%__opensciencegrid/osgvo-ubuntu-20.04:latest"/>
#   <attr name="OSG_DEFAULT_CONTAINER_DISTRIBUTION_GPU" glidein_publish="False" job_publish="False" parameter="True" type="string" value="100%__opensciencegrid/osgvo-el7-cuda10:latest"/>
#

glidein_config="$1"
export glidein_config

# make sure we do not put images in /tmp
export TMPDIR="$PWD/tmp"
mkdir -p $TMPDIR


function pull_default_container_image {
    local arch download_ok ret

    arch=$(arch)
    download_ok=false

    #
    # pull the image into a Singularity SIF file
    # Attempt a download via Pelican first, then HTTP, then a pull from Harbor
    #
    IMAGE_NAME=$(echo "$SELECTED_IMAGE" | sed 's;[:/];__;g')
    IMAGE_PATH=$PWD/images/$IMAGE_NAME.sif
    HTTP_BASE=http://ospool-images.osgprod.tempest.chtc.io/v2
    PELICAN_BASE=pelican://osg-htc.org/ospool/uc-shared/public/OSG-Staff/images/v2
    HARBOR_URL=docker://hub.opensciencegrid.org/$SELECTED_IMAGE

    # first, we have to do a HTTP call to get the latest version of the selected image
    LATEST=$(curl -s -S --insecure --max-time 60 --retry 0 $HTTP_BASE/$arch/$IMAGE_NAME/latest.txt); ret=$?
    if [[ $ret != 0 || ! $LATEST ]]; then
        my_warn "Unable to determine the latest sif for $IMAGE_NAME"
        my_warn "curl returned $ret; output: $LATEST"
        return 1
    fi

    URL_PATH="$arch/$IMAGE_NAME/$LATEST"

    download_ok=0
    info "Starting download of default image ($IMAGE_NAME)"
    info "Downloading via Pelican from $PELICAN_BASE/$URL_PATH"
    if osdf_download "$IMAGE_PATH" "$PELICAN_BASE/$URL_PATH" &>"$IMAGE_PATH.log"; then
        info "Pelican download successful"
        download_ok=1
        advertise OSG_DEFAULT_SINGULARITY_IMAGE_SOURCE "OSDF" "S"
    else
        my_warn "Pelican download failed"
        info "Downloading via HTTP from $HTTP_BASE/$URL_PATH"
        if http_download "$IMAGE_PATH" "$HTTP_BASE/$URL_PATH" &>"$IMAGE_PATH.log"; then
            info "HTTP download successful"
            download_ok=1
            advertise OSG_DEFAULT_SINGULARITY_IMAGE_SOURCE "HTTP" "S"
        else
            my_warn "HTTP download failed"
            info "Downloading from Docker registry at $HARBOR_URL"
            if singularity pull --force "$IMAGE_PATH" "$HARBOR_URL" &>"$IMAGE_PATH.log"; then
                info "Registry download successful"
                download_ok=1
                advertise OSG_DEFAULT_SINGULARITY_IMAGE_SOURCE "Registry" "S"
            else
                my_warn "Registry download failed"
            fi
        fi
    fi

    if [ $download_ok = 1 ]; then
        advertise ALLOW_NONCVMFS_IMAGES "True" "C"
        advertise GWMS_SINGULARITY_PULL_IMAGES "True" "C"
        advertise SINGULARITY_IMAGES_DICT "default:$IMAGE_PATH" "S"
        advertise REQUIRED_OS "default" "S"
        advertise OSG_DEFAULT_SINGULARITY_IMAGE "$IMAGE_PATH" "S"
        return 0
    else
        my_warn "Failed to pull $SELECTED_IMAGE via http/pelican/registry"
        return 1
    fi
}


function determine_default_container_image {
    # Selects a default image to use if a job does not specify
    # an image to use. The new style to specify this is with an
    # attribute named OSG_DEFAULT_CONTAINER_DISTRIBUTION
    # Example:
    # 70%__opensciencegrid/osgvo-el7:latest 20%__opensciencegrid/osgvo-el6:latest 8%__opensciencegrid/osgvo-ubuntu-18.04:latest 2%__opensciencegrid/osgvo-debian-10:latest 

    OSG_DEFAULT_CONTAINER_DISTRIBUTION=$(gconfig_get OSG_DEFAULT_CONTAINER_DISTRIBUTION)
    arch=$(arch)

    # if we are given GPUs, pick up GPU specific images
    # make sure CUDA_VISIBLE_DEVICES is set to something sane - we
    # have seen values like "na", -1 and 10000
    if [ -n "$CUDA_VISIBLE_DEVICES" ] && \
       [ "$CUDA_VISIBLE_DEVICES" != "na" ] && \
       [ "$CUDA_VISIBLE_DEVICES" != "-1" ] && \
       [ "$CUDA_VISIBLE_DEVICES" != "10000" ] ; then
        OSG_DEFAULT_CONTAINER_DISTRIBUTION=$(gconfig_get OSG_DEFAULT_CONTAINER_DISTRIBUTION_GPU)
    fi

    SELECTED_IMAGE=""
    if [ "x$OSG_DEFAULT_CONTAINER_DISTRIBUTION" != "x" ]; then
        # new style - weighted random selection
        TARGET=$(($RANDOM % 100 + 1))
        TOTAL_PERCENT=0
        for ENTRY in $OSG_DEFAULT_CONTAINER_DISTRIBUTION; do
            PERCENT=`echo $ENTRY | sed 's/%__.*//'`
            IMAGE=`echo $ENTRY | sed 's/.*%__//'`
            # we just need to track the upper limit
            TOTAL_PERCENT=$(($TOTAL_PERCENT + $PERCENT))
            if [ $TARGET -le $TOTAL_PERCENT ]; then
                SELECTED_IMAGE=$IMAGE
                break
            fi
        done
    fi

    # if everything else fails, use EL8/EL9
    if [ "x$SELECTED_IMAGE" = "x" ]; then
        if [ "x$CUDA_VISIBLE_DEVICES" != "x" -a "x$CUDA_VISIBLE_DEVICES" != "x10000" ]; then
            SELECTED_IMAGE="htc/rocky:8-cuda-11.0.3"
        else
            SELECTED_IMAGE="htc/rocky:9"
        fi
    fi

    # temp for arm until we get the image repos/syncing in place
    if [ "X$arch" = "Xaarch64" ]; then
        SELECTED_IMAGE="htc/rocky:9"
    fi

    # Should we use pull or use CVMFS? The default is pulling
    pull_images=1

    # Set image storage location via $IMAGES_DIR in the environment
    # or IMAGES_DIR in the glidein config
    [[ -n $IMAGES_DIR ]] || IMAGES_DIR=$(gconfig_get IMAGES_DIR)
    [[ -n $IMAGES_DIR ]] || IMAGES_DIR=$PWD
    mkdir -p "$IMAGES_DIR"
    entry_name=$(gconfig_get GLIDEIN_Entry_Name)
    
    # Make an images subdir and symlink to it from the pilot dir
    # The subdir will contain the hostname so we can read the link to find out what host it's on
    IMAGES_SUBDIR=$IMAGES_DIR/images-$(hostname)/
    mkdir -p "$IMAGES_SUBDIR"
    if ! echo x > "$IMAGES_SUBDIR/.test" 2>&1; then
        info "Not allowing non-CVMFS images, as we couldn't write to the images dir ($IMAGES_SUBDIR)"
        pull_images=0  # So close!
    fi
    rm -f "$IMAGES_SUBDIR/.test"
    ln -snf "$IMAGES_SUBDIR" images

    # a set of rules for disabling pulling
    if (uname -r | egrep '^3\.') >/dev/null 2>&1; then
        # do not allow .sif images on 3.x kernels (OSPOOL-18)
        info "Not allowing non-CVMFS images because of the kernel version"
        pull_images=0
    elif (echo "x$entry_name" | egrep "OSG_CHTC-canary2|Syracuse|Nebraska") >/dev/null 2>&1; then
        info "Not allowing non-CVMFS images, as the site is on the deny list ($entry_name)"
        pull_images=0
    fi

    if [ $pull_images = 1 ]; then
        if pull_default_container_image; then
            return
        fi
    fi

    # prepend the base bath
    SELECTED_IMAGE="/cvmfs/singularity.opensciencegrid.org/$SELECTED_IMAGE"
    advertise SINGULARITY_IMAGES_DICT "default:$SELECTED_IMAGE" "S"
    advertise OSG_DEFAULT_SINGULARITY_IMAGE "$SELECTED_IMAGE" "S"
    advertise REQUIRED_OS "default" "S"
}

if [ "$glidein_config" != "NONE" ]; then
    ###########################################################
    # import advertise and add_condor_vars_line functions
    if [ "x$add_config_line_source" = "x" ]; then
        export add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
        export condor_vars_file=`grep -i "^CONDOR_VARS_FILE " $glidein_config | awk '{print $2}'`
    fi

    # full path is problematic as sometimes we are inside a container - however, looks like
    # the file is always named "add_config_line.source", so use that
    add_config_line_source=$PWD/add_config_line.source

    source $add_config_line_source
fi

# source our helpers
group_dir=$(gconfig_get GLIDECLIENT_GROUP_WORK_DIR)
client_dir=$(gconfig_get GLIDECLIENT_WORK_DIR)
cp -ns $client_dir/*ospool-lib $group_dir/ 2>/dev/null && echo "Linking helper(s) from $(ls $client_dir/*ospool-lib | tr '\n' ' ')" 1>&2
if [ -e "$group_dir/itb-ospool-lib" ]; then
    source "$group_dir/itb-ospool-lib"
else
    source "$group_dir/ospool-lib"
fi

determine_default_container_image


